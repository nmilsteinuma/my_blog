[
  {
    "path": "posts/welcome/",
    "title": "Welcome to My Blog",
    "description": "Welcome to our new blog, My Blog. We hope you enjoy \nreading what we have to say!",
    "author": [
      {
        "name": "Nora Jones",
        "url": "https://example.com/norajones"
      }
    ],
    "date": "2022-03-29",
    "categories": [],
    "contents": "\n\n\n\n",
    "preview": {},
    "last_modified": "2022-03-29T12:31:19-04:00",
    "input_file": {}
  },
  {
    "path": "posts/2022-03-29-blog-post-7-networks/",
    "title": "Blog Post 7 Networks",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "Noah Milstein",
        "url": {}
      }
    ],
    "date": "2022-03-29",
    "categories": [],
    "contents": "\n\n\n\n\n\n\nAn Introduction to\nthe Project and Dataset\nThe project that I am doing involves conflict in\nthe high middle ages. This was the period between 1000 and 1200\n\n\n\nPart 1:\nDescribe the Dataset You Are\nUsing:\nThe Dataset Being Used: The dataset that I am using\nis wikipedia list of wars throughout history, this article is the “List\nof wars: 1000–1499” which acts as a subset of the “2nd-millennium\nconflicts” I chose this dataset as an exemplar of popular history’s\ndepiction of the centralization of worldwide conflict. Wikipedia, being\nan accessible source generally created from relevant citations makes it\na good case study to see where historical writers and academics center\ntheir world are relevant conflicts.\nIdentify initial network\nformat:\nAnswer: The initial network format is as an edge\nlist, the first, in column contains the winners of each\nwar while the second, out column contains the losers of\neach. These sets of belligerents are directed\nNetwork\nStructure: Wars Startings in the 1000s\n\n Network attributes:\n  vertices = 111 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 153 \n    missing edges= 0 \n    non-missing edges= 153 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nNetwork\nStructure: Wars Startings in the 1100s\n\n Network attributes:\n  vertices = 97 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 238 \n    missing edges= 0 \n    non-missing edges= 238 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nNetwork Structure:\nWars Starting in the 1200s\n\n Network attributes:\n  vertices = 161 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 313 \n    missing edges= 0 \n    non-missing edges= 313 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nIdentify Nodes: Describe and identify the nodes\n(including how many nodes are in the dataset)\nAnswer: Nodes or vertices in these datasets\nrepresent belligerents in wars throughout history, the involved parties\nin each conflict can be a nation, province, individual, or group so long\nas they are listed as involved in the conflict. In the 1000s there are\n117, in the 1100s there are 78 and in the 1200s there are 161.\nWhat Constitutes a Tie: What constitutes a tie or\nedge (including how many ties, whether ties are directed/undirected and\nweighted/binary, and how to interpret the value of the tie if any)\nAnswer: A tie or edge in this dataset represents a\nwar, this war can be between two nations or groups within a nation.\nThese edges can represent a war that involved many more nations but are\nalways tied to each and every party involved on both sides. These edges\nare directed and the direction indicates which side “won” the conflict\n(if an edge has an arrow pointing to another the node that originated\nthat arrow won the war against them. There are 153 edges in the 1000s,\n225 edges in 1100s and 313 edges in the 1200s.\nEdge Attributes and Subset: Whether or not there are\nedge attributes that might be used to subset data or stack multiple\nnetworks (e.g., tie type, year, etc).\nAnswer: There are a number of attributes that could\nbe used to subset the data, year that the conflict began or the length\nof time it lasted are available. Aspects like each side’s religion and\nthe area where the conflict took place could be used to subset the data\nitself.\nPart 2:\nBrokerage and Betweeness\ncentrality\nWhat are betweeness and brokerage cenrrality\nCalculate brokerage and betweenneess centrality measures for one or more\nsubsets of your network data, and write up the results and your\ninterpretation of them.\nAnswer: I will be calculating these measures for\nwars in 1000-1099, 1100-1199, and 1200-1399.\n\n\n\nBrokerage scores in the\n1000s\n\n\n\n\n\n(wars_in_1000s.nodes.stat_2%>%\n  arrange(desc(broker.tot))%>%\n  slice(1:10))[,c(1,11:15)] %>%kable()\n\n\nname\nbroker.tot\nbroker.coord\nbroker.itin\nbroker.rep\nbroker.gate\nByzantine Empire\n22.7376579\nNaN\n3.1654785\nNaN\nNaN\nHoly Roman Empire\n9.2813605\nNaN\n2.2468427\nNaN\nNaN\nSultanate of Rum\n9.2813605\nNaN\n-0.5090648\nNaN\nNaN\nEngland\n6.9745666\nNaN\n5.0036896\n-0.0853606\n-0.0853606\nKingdom of Sicily\n5.0522384\n-0.0176111\n4.0866123\n-0.1201631\n-0.1201631\nSeljuk Empire\n1.9765133\n-0.0176111\n-0.5084146\n3.4677529\n-0.1201631\nKingdom of France\n1.9765133\nNaN\n-0.5090648\nNaN\nNaN\nKingdom of Georgia\n0.8231164\n-0.0176111\n-0.5084146\n-0.1201631\n-0.1201631\nPapal States\n0.4386507\n-0.0176111\n-0.5084146\n-0.1201631\n10.6435850\nGhaznavids\n0.0541851\n-0.1380791\n-0.4907567\n-0.2903366\n-0.2903366\n\nBrokerage scores in the\n1100s\n\n\n\n\n\n\n\n\n(wars_in_1100s.nodes.stat_2%>%\n  arrange(desc(broker.tot))%>%\n  slice(1:10))[,c(1,10:14)] %>%kable()\n\n\nname\nbroker.tot\nbroker.coord\nbroker.itin\nbroker.rep\nbroker.gate\nKingdom of Jerusalem\n17.1050061\nNaN\n2.8705599\n24.5610650\n-0.1357675\nFatimid Caliphate\n10.2415178\nNaN\n-0.6472506\nNaN\nNaN\nAyyubid Dynasty\n9.3615834\nNaN\n-0.6465587\n-0.1357675\n-0.1357675\nZengid Dynasty\n7.4257278\nNaN\n0.7591543\nNaN\nNaN\nByzantine Empire\n6.8977671\nNaN\n0.7602887\n-0.1357675\n-0.1357675\nEngland\n5.8418459\nNaN\n-0.6465587\n-0.1357675\n-0.1357675\nHoly Roman Empire\n3.0260558\nNaN\n-0.6465587\n-0.1357675\n-0.1357675\nKingdom of France\n1.6181608\nNaN\n-0.6465587\n-0.1357675\n-0.1357675\nKingdom of Sicily\n0.5622395\n-0.1467125\n-0.6293842\n-0.3476788\n-0.3476788\nPapal States\n0.0342789\n-0.1264908\n-0.6336748\n-0.3236913\n2.5014147\n\nBrokerage scores in the\n1200s\n\n\n\n\n\n\n\n\n\n\nname\nbroker.tot\nbroker.coord\nbroker.itin\nbroker.rep\nbroker.gate\nMongol Empire\n47.964825\nNaN\n-0.5966483\nNaN\nNaN\nKingdom of France\n28.663539\nNaN\n-0.5966483\nNaN\nNaN\nAyyubid Dynasty\n26.995527\nNaN\n2.3528915\nNaN\nNaN\nKingdom of England\n21.991489\nNaN\n8.9893561\nNaN\nNaN\nRepublic of Genoa\n11.983415\nNaN\n-0.5966483\nNaN\nNaN\nKnights Templar\n10.077115\nNaN\n1.6155066\nNaN\nNaN\nHoly Roman Empire\n4.834790\n-0.0170801\n-0.5961482\n10.865523\n10.865523\nPrincipality of Antioch\n4.834790\n-0.0170801\n2.3541101\n13.613565\n-0.126648\nKingdom of Cyprus\n4.596503\n58.5391124\n0.1414163\n13.613565\n10.865523\nArmenian Kingdom of Cilicia\n3.881640\n-0.0170801\n-0.5961482\n-0.126648\n-0.126648\n\n\nname\nbroker.gate\nPapal States\n10.6435850\nCounty of Aversa\n-0.0853606\nCounty of Sicily\n-0.0853606\nEngland\n-0.0853606\nChola Empire\n-0.0853606\nCounty of Apulia\n-0.1201631\nKingdom of Sicily\n-0.1201631\nKingdom of Georgia\n-0.1201631\nGreat Seljuq Empire\n-0.1201631\nSeljuk Empire\n-0.1201631\nname\nbroker.tot\nByzantine Empire\n22.7376579\nHoly Roman Empire\n9.2813605\nSultanate of Rum\n9.2813605\nEngland\n6.9745666\nKingdom of Sicily\n5.0522384\nSeljuk Empire\n1.9765133\nKingdom of France\n1.9765133\nKingdom of Georgia\n0.8231164\nPapal States\n0.4386507\nGhaznavids\n0.0541851\n\nOption 2.A\nFor a Specific Research Question: If you have a\nspecific research question, please feel free to use that to guide your\nanalysis. Otherwise, you may want to orient your analysis as follows in\norder to identify a compelling question or noteworthy pattern in the\ndata that can be interpreted.\nAnswer: Since I am interested in the relative power\nof nations by their relative position ad centrality in the worldwide\nconflict, network brokerage can be used to illustrate significant\npositions in global conflict. Below I wanted to look at 4 kinds of\nbrokerage, these are broker.gate or gatekeeper, coordinator, liason, and\nitinerant. I am interested to see if these specific coordination types\nare primarily done by specific nations.\n\n\n\n\n\n\n\n\n\nTotal Brokerage\nExplanation: Looking at total brokerage in this\ndataset gives a sense of which factions were responsible for highest\nconnection of unconnected actors through conflict. Given the crusades\nigniting conflict between Europe and the middle east it is sensible that\nthe Byzantine Empire in the center of both connects the most unconnected\nactors through conflict closely followed by the Sultanate of Rum, a\nmajor Muslim faction that fought against the crusades and third being\nthe Holy Roman Empire who participated in many conflicts including the\ncrusades. These are followed by England who centered the wars in the\nBritish isles and the Kingdom of Sicily who were also in a position of\nconflict.\n\nname\nbroker.tot\nByzantine Empire\n22.737658\nHoly Roman Empire\n9.281360\nSultanate of Rum\n9.281360\nEngland\n6.974567\nKingdom of Sicily\n5.052238\n\nCoordinator Brokerage\nExplanation: In this case no particular country is\nvery high above any other in terms of their coordinator brokerage,\nmeaning that within groups no particular nations appear to be brokering\nmore within the groups.\n\nname\nbroker.coord\nCounty of Apulia\n-0.0176111\nKingdom of Sicily\n-0.0176111\nKingdom of Georgia\n-0.0176111\nGreat Seljuq Empire\n-0.0176111\nPapal States\n-0.0176111\n\nItinerant Brokerage\nExplanation: Itinerant brokerage represents when a\nnon-group actor connects 2 actors in a group it is no in to each other,\nin this case England has the highest score. Looking at the network graph\nthey do appear to connect 2 actors in a group together.\n\nname\nbroker.itin\nEngland\n5.0036896\nKingdom of Sicily\n4.0866123\nByzantine Empire\n3.1654785\nHoly Roman Empire\n2.2468427\nPrincipality of Kiev\n0.4812412\n\nRepresentative Brokerage\nExplanation: Representative brokerage indicates that\nthe broker, or nation in question loses a war to another in their group,\nbut wins another against a faction outside of their group. This can be\nthough of as their directed connections to them. In this case the Seljuk\nEmpire and Kingdom of Aragon have instances in which they lose to\nfactions within their group before beating those outside of it.\n\nname\nbroker.rep\nSeljuk Empire\n3.4677529\nKingdom of Aragon\n0.9281821\nCounty of Aversa\n-0.0853606\nCounty of Sicily\n-0.0853606\nEngland\n-0.0853606\n\nGatekeeper Brokerage\nExplanation: The Papal states being ranked highest\nin gatekeeper brokerage is an interesting observation as no other nation\nin the dataset appears to be close to their level as most are negative\nin this category. In this cae being a gatekeeper means that they are in\nat conflict in a group with another while the nation in a different\ngroup of conflicts is only at war with them from the group. This is an\ninteresting observation given the Papal states role as a coordinator of\nthe war, but not a participant in the conflcit as directly as other\nbelligerents. (This being the crusade given the period)\n\nname\nbroker.gate\nPapal States\n10.6435850\nCounty of Aversa\n-0.0853606\nCounty of Sicily\n-0.0853606\nEngland\n-0.0853606\nChola Empire\n-0.0853606\n\nLiaison Brokerage\nExplanation: A liaison broker, in this case, is a\nfaction that loses a war to a group they do not belong to and wins a war\nagainst a different group than the first that they also do not belong\nto. The Byzantine Empire, Sultanate of Rum, and Holy Roman Empire are\nhighest in this category likely owing to their frequent states of\nconflict beyond the crusades against a variety of groups.\n\nname\nbroker.lia\nByzantine Empire\n28.140866\nSultanate of Rum\n12.477603\nHoly Roman Empire\n10.961803\nEngland\n6.548214\nKingdom of Sicily\n4.589419\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNetwork\n1000s Plot Grouping Determined with No Cluster Method\n\n\n\nNetwork\n1000s Plot Grouping Determined with the Average Cluster Method\n\n\n\nNetwork\n1000s Plot Grouping Determined with the Single Cluster Method\n\n\n\nNetwork\n1000s Plot Grouping Determined with the Ward.D Cluster Method\n\n\n\nNetwork 1000s Plot igraph\n\n\n\nNetwork Graphing 1100s\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNetwork\n1100s Plot Grouping Determined with No Cluster Method\n\n\n\nNetwork\n1100s Plot Grouping Determined with the Average Cluster Method\n\n\n\nNetwork\n1100s Plot Grouping Determined with the Single Cluster Method\n\n\n\nNetwork\n1100s Plot Grouping Determined with the Ward.D Cluster Method\n\n\n\nNetwork 1100s Plot igraph\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nwars_in_1000s_edgelist <- as.matrix(wars_in_1000s)\n\nwars_in_1000s_edgelist_network_edgelist <- graph.edgelist(wars_in_1000s_edgelist, directed=TRUE)\n\nwars_in_1000s.ig<-graph_from_data_frame(wars_in_1000s)\n\nwars_in_1000s_network <- asNetwork(wars_in_1000s.ig)\n\n\n\n\n\naspects_of_1000s_states <- read_excel(\"~/Desktop/Spring 2022/Networks/aspects_of_1000s_states.xlsx\")\n\ntotal_1000s <- merge(aspects_of_1000s_states, wars_in_1000s.nodes.stat_2, by=\"name\")\n\n\n\n\n\ntotal_1000s_brokerag_reg<-total_1000s\n\ntotal_1000s_brokerag_reg$win_rate <- (total_1000s_brokerag_reg$outdegree/total_1000s_brokerag_reg$totdegree)\n\ntotal_1000s_brokerag_reg$loss_rate <- (total_1000s_brokerag_reg$indegree/total_1000s_brokerag_reg$totdegree)\n\ntotal_1000s_brokerag_reg_binom <- total_1000s_brokerag_reg %>% mutate(more_win_or_loss = case_when(\n  win_rate < 0.5 ~ 0,\n    win_rate >= 0.5 ~ 1))\n\nFirst_1000s_regression <- glm(more_win_or_loss~.-name-totdegree-indegree-outdegree-dc-eigen.dc-win_rate-loss_rate, total_1000s_brokerag_reg_binom, family=binomial)\n\nFirst_1000s_regression\n\n\n\nCall:  glm(formula = more_win_or_loss ~ . - name - totdegree - indegree - \n    outdegree - dc - eigen.dc - win_rate - loss_rate, family = binomial, \n    data = total_1000s_brokerag_reg_binom)\n\nCoefficients:\n (Intercept)      Catholic         Islam      Orthodox      Buddhist  \n  -2.090e+01     1.446e-01    -7.108e-02    -4.043e-01    -8.572e-02  \n       Pagan      Tengrism        Shinto         Hindu     Shamanism  \n   5.506e-01    -5.656e+01     1.820e+00    -2.142e+00    -1.506e+00  \n       eigen         close            rc      eigen.rc    broker.tot  \n  -1.877e+03     5.146e+03    -3.979e+00     1.574e+03     2.378e+02  \nbroker.coord   broker.itin    broker.rep   broker.gate    broker.lia  \n  -9.610e+01    -9.449e+01    -7.164e+01    -2.810e+01    -1.298e+02  \n\nDegrees of Freedom: 101 Total (i.e. Null);  82 Residual\n  (8 observations deleted due to missingness)\nNull Deviance:      140.8 \nResidual Deviance: 4.53e-09     AIC: 40\n\n\n\nset.seed(292)\n\ntotal_1000s_for_regression <- total_1000s[,-c(1, 20:25)]\n\ntotal_1000s_for_regression$win_rate <- (total_1000s_for_regression$outdegree/total_1000s_for_regression$totdegree)\n\ntotal_1000s_for_regression$loss_rate <- (total_1000s_for_regression$indegree/total_1000s_for_regression$totdegree)\n\ntotal_1000s_for_regression <- total_1000s_for_regression %>% mutate(more_win_or_loss = case_when(\n  win_rate < 0.5 ~ 0,\n    win_rate >= 0.5 ~ 1))\n\nFirst_1000s_regression <- glm(more_win_or_loss~.-loss_rate-win_rate-totdegree-indegree-outdegree-dc-eigen.dc, total_1000s_for_regression, family=binomial)\n\nFirst_1000s_regression\n\n\n\nCall:  glm(formula = more_win_or_loss ~ . - loss_rate - win_rate - totdegree - \n    indegree - outdegree - dc - eigen.dc, family = binomial, \n    data = total_1000s_for_regression)\n\nCoefficients:\n(Intercept)     Catholic        Islam     Orthodox     Buddhist  \n   -15.1948      13.9008      12.7531      14.6893      15.0858  \n      Pagan     Tengrism       Shinto        Hindu    Shamanism  \n     0.9610      11.6691      16.0623       9.1358      -0.1497  \n      eigen        close           rc     eigen.rc  \n   -82.1100     256.5294      -3.3322     -17.3152  \n\nDegrees of Freedom: 109 Total (i.e. Null);  96 Residual\nNull Deviance:      152.3 \nResidual Deviance: 58.4     AIC: 86.4\n\n\n\nset.seed(6738)\n\nin_training<- sample(1:nrow(total_1000s_for_regression),  nrow(total_1000s_for_regression) * 0.7 )\n\ntraining_1000s <- total_1000s_for_regression[in_training,]\n\ntest_1000s <- total_1000s_for_regression[-in_training,]\n\nlm_1000s_binom_subset_1 <- glm(more_win_or_loss~.-loss_rate-win_rate-totdegree-indegree-outdegree-dc-eigen.dc, total_1000s_for_regression, family=binomial, subset = in_training )\n\nlogsitic_1_1000s_prob <- predict(lm_1000s_binom_subset_1, test_1000s,\ntype = \"response\")\n\nlog_preds_1<-ifelse(logsitic_1_1000s_prob >= 0.5, 1, 0)\n\nprediction_1_logs <-mean(log_preds_1 == test_1000s$more_win_or_loss)\n\nprediction_1_logs %>% kable()\n\n\nx\n0.9090909\n\n\n\nlibrary(glmnet)\nlibrary(MASS)\n\n\n\n\n\nset.seed(246)\n\nx_ridge <- model.matrix(more_win_or_loss ~ .-loss_rate-win_rate-totdegree-indegree-outdegree-dc-eigen.dc, total_1000s_for_regression)[, -1] \n\ny_ridge <- total_1000s_for_regression$more_win_or_loss\n\ngrid <- 10^seq(10, -2, length = 100)\n\nridge.mod <- glmnet(x_ridge, y_ridge, alpha = 0, lambda = grid)\n\ndim(coef(ridge.mod))\n\n\n[1]  14 100\n\n\n\nset.seed(729)\ntrain_ridge <- sample(1:nrow(x_ridge), nrow(x_ridge)*0.8 ) \n\ntest_ridge <- (-train_ridge)\n\ny.test_ridge <- y_ridge[test_ridge]\n\n\n\n\n\nset.seed(9292)\n\nridge.mod <- glmnet(x_ridge[train_ridge, ], y_ridge[train_ridge], \n                    alpha = 0, lambda = grid, thresh = 1e-12)\n\nridge.pred <- predict(ridge.mod, s = 4, newx = x_ridge[test_ridge,])\n\nmean((ridge.pred - y.test_ridge)^2) %>% kable()\n\n\nx\n0.2416376\n\n\n\nset.seed(231)\nridge.pred <- predict(ridge.mod, s = 0, newx = x_ridge[test_ridge, ], \n                      exact = T, x = x_ridge[train_ridge, ], y = y_ridge[train_ridge])\n\npredict(ridge.mod, s = 0, exact = T, type = \"coefficients\", \n        x = x_ridge[train_ridge, ], y = y_ridge[train_ridge])[1:14, ]\n\n\n(Intercept)    Catholic       Islam    Orthodox    Buddhist \n 0.21024033  0.21827317 -0.01160454  0.21312966  0.35601806 \n      Pagan    Tengrism      Shinto       Hindu   Shamanism \n 0.08955257  0.14069809  0.38278477 -0.07034364 -0.01038790 \n      eigen       close          rc    eigen.rc \n-4.61480591 12.51011844 -0.29977861  4.64835194 \n\n\n\nset.seed(9292)\n\ncv.out <- cv.glmnet(x_ridge[train_ridge, ], y_ridge[train_ridge], alpha = 0) \n\nplot(cv.out)\n\n\n\n\n\n\nset.seed(9292)\n\nbestlam <- cv.out$lambda.min\n\nbestlam\n\n\n[1] 0.415338\n\n\n\nset.seed(9292)\n\nridge.pred <- predict(cv.out, s = bestlam, newx = x_ridge[test_ridge,])\n\nmean((ridge.pred - y.test_ridge)^2) %>% kable()\n\n\nx\n0.174632\n\n\n\nset.seed(2897)\n\nx_lasso <- model.matrix(more_win_or_loss ~ .-loss_rate-win_rate-totdegree-indegree-outdegree-dc-eigen.dc, total_1000s_for_regression)[, -1] \n\ny_lasso <- total_1000s_for_regression$more_win_or_loss\n\ngrid <- 10^seq(10, -2, length = 100)\n\nlasso.mod <- glmnet(x_lasso, y_lasso, alpha = 0, lambda = grid)\n\ndim(coef(lasso.mod))\n\n\n[1]  14 100\n\n\n\nset.seed(729)\n\ntrain_lasso <- sample(1:nrow(x_ridge), nrow(x_ridge)*0.8 ) \n\ntest_lasso <- (-train_lasso)\n\ny.test_lasso <- y_lasso[test_lasso]\n\n\n\n\n\nset.seed(9292)\n\nlasso.mod <- glmnet(x_lasso[train_lasso, ], y_lasso[train_lasso], \n                    alpha = 1, lambda = grid)\n\nplot(lasso.mod)\n\n\n\n\n\n\nset.seed(1029)\n\ncv.out_2 <- cv.glmnet(x_lasso[train_lasso, ], y_lasso[train_lasso], alpha = 1) \n\nplot(cv.out_2)\n\n\n\n\n\n\nset.seed(1920)\n\nbestlam_2 <- cv.out_2$lambda.min\n\nlasso.pred <- predict(cv.out_2, s = bestlam_2, newx = x_ridge[test_ridge,])\n\nmean((lasso.pred - y.test_ridge)^2) %>% kable()\n\n\nx\n0.1749583\n\n\n\nset.seed(2739)\n\nout <- glmnet(x_lasso[train_lasso, ], y_lasso[train_lasso], \n              alpha = 1, lambda = grid)\n\nlasso.coef <- predict(out, type = \"coefficients\", s = bestlam_2)[1:14, ]\n\nlasso.coef\n\n\n(Intercept)    Catholic       Islam    Orthodox    Buddhist \n 0.42561685  0.05577020 -0.09275344  0.00000000  0.00000000 \n      Pagan    Tengrism      Shinto       Hindu   Shamanism \n 0.00000000  0.00000000  0.00000000  0.00000000  0.00000000 \n      eigen       close          rc    eigen.rc \n 0.00000000  3.22570629 -0.21240622  0.00000000 \n\n\n\naspects_of_1100s_states <- read_excel(\"~/Desktop/Spring 2022/Networks/aspects_of_1100s_states.xlsx\")\n\ntotal_1100s <- merge(aspects_of_1100s_states, wars_in_1100s.nodes.stat_2, by=\"name\")\n\n\n\n\n\naspects_of_1200s_states <- read_excel(\"~/Desktop/Spring 2022/Networks/aspects_of_1200s_states.xlsx\")\n\ntotal_1200s <- merge(aspects_of_1200s_states, wars_in_1200s.nodes.stat_2, by=\"name\")\n\n\n\nCommunity Grouping\nLabel Propagation 1000s:\nThe first community cluster below is done using label propagation.\nThis results in 39 groups\n\n\nset.seed(23)\ncomm.lab<-label.propagation.community(wars_in_1000s.ig)\n#Inspect clustering object\n# igraph::groups(comm.lab)\n\n\n\n\n\n\nWalktrap 1000s:\nWalktrap classification as seen below results in 19 distinct\ncommunities.\n\n\nset.seed(238)\n#Run clustering algorithm: fast_greedy\nwars_in_1000s.wt<-walktrap.community(wars_in_1000s.ig)\n\n#igraph::groups(wars_in_1000s.wt)\n\n\n\nAdding more steps resulted in 19 groups for both 10 and 20 steps.\n\n\n#Run & inspect clustering algorithm: 10 steps\n#igraph::groups(walktrap.community(wars_in_1000s.ig, steps=10)) \n#Run & inspect clustering algorithm: 20 steps\n#igraph::groups(walktrap.community(wars_in_1000s.ig ,steps=20))\n#Run & inspect clustering algorithm\n\n\n\n\n\n\nMachine\nLearning, Regression and Principle Components:\n\n\ntotal_1000s_for_PCA <- total_1000s_brokerag_reg_binom[-c(20:27)]\n\napply(total_1000s_for_PCA[-1], 2, mean)\n\n\n        Catholic            Islam         Orthodox         Buddhist \n     0.454545455      0.181818182      0.154545455      0.063636364 \n           Pagan         Tengrism           Shinto            Hindu \n     0.036363636      0.018181818      0.054545455      0.045454545 \n       Shamanism        totdegree         indegree        outdegree \n     0.009090909      2.754545455      1.336363636      1.418181818 \n           eigen            close               rc         eigen.rc \n     0.028058711      0.023546832      0.287358773      0.003637773 \n              dc         eigen.dc more_win_or_loss \n     0.712641227      0.024420939      0.481818182 \n\n\n\napply(total_1000s_for_PCA[-1], 2, var)\n\n\n        Catholic            Islam         Orthodox         Buddhist \n    0.2502085071     0.1501251043     0.1318598832     0.0601334445 \n           Pagan         Tengrism           Shinto            Hindu \n    0.0353628023     0.0180150125     0.0520433695     0.0437864887 \n       Shamanism        totdegree         indegree        outdegree \n    0.0090909091     8.9208507089     2.6656380317     6.3189324437 \n           eigen            close               rc         eigen.rc \n    0.0076304265     0.0019575460     0.1260782284     0.0004728954 \n              dc         eigen.dc more_win_or_loss \n    0.1260782284     0.0056490031     0.2519599666 \n\n\n\npr.out <- prcomp(total_1000s_for_PCA[-1], scale = TRUE)\n\n\n\n\n\nnames(pr.out)\n\n\n[1] \"sdev\"     \"rotation\" \"center\"   \"scale\"    \"x\"       \n\n\n\npr.out$center\n\n\n        Catholic            Islam         Orthodox         Buddhist \n     0.454545455      0.181818182      0.154545455      0.063636364 \n           Pagan         Tengrism           Shinto            Hindu \n     0.036363636      0.018181818      0.054545455      0.045454545 \n       Shamanism        totdegree         indegree        outdegree \n     0.009090909      2.754545455      1.336363636      1.418181818 \n           eigen            close               rc         eigen.rc \n     0.028058711      0.023546832      0.287358773      0.003637773 \n              dc         eigen.dc more_win_or_loss \n     0.712641227      0.024420939      0.481818182 \n\n\n\npr.out$scale\n\n\n        Catholic            Islam         Orthodox         Buddhist \n      0.50020846       0.38745981       0.36312516       0.24522122 \n           Pagan         Tengrism           Shinto            Hindu \n      0.18805000       0.13422002       0.22813016       0.20925221 \n       Shamanism        totdegree         indegree        outdegree \n      0.09534626       2.98677932       1.63267818       2.51374868 \n           eigen            close               rc         eigen.rc \n      0.08735231       0.04424416       0.35507496       0.02174616 \n              dc         eigen.dc more_win_or_loss \n      0.35507496       0.07515985       0.50195614 \n\n\n\n\n\n\nbiplot(pr.out, scale = 0)\n\n\n\n\n\n\npr.out$rotation = -pr.out$rotation \n\npr.out$x = -pr.out$x\n\nbiplot(pr.out, scale = 0)\n\n\n\n\n\n\npr.out$sdev\n\n\n [1] 2.217501e+00 1.681548e+00 1.239242e+00 1.211199e+00 1.065982e+00\n [6] 1.037692e+00 1.029507e+00 1.011117e+00 1.005425e+00 9.514802e-01\n[11] 8.848499e-01 7.782431e-01 6.162540e-01 4.426224e-01 2.541422e-01\n[16] 1.091189e-01 7.597269e-16 6.258811e-16 2.174635e-16\n\n\n\npr.var <- pr.out$sdev^2\n\npr.var\n\n\n [1] 4.917311e+00 2.827605e+00 1.535720e+00 1.467004e+00 1.136318e+00\n [6] 1.076804e+00 1.059884e+00 1.022359e+00 1.010879e+00 9.053146e-01\n[11] 7.829594e-01 6.056623e-01 3.797690e-01 1.959146e-01 6.458828e-02\n[16] 1.190694e-02 5.771849e-31 3.917271e-31 4.729037e-32\n\n\n\npve <- pr.var / sum(pr.var)\n\npve\n\n\n [1] 2.588059e-01 1.488213e-01 8.082739e-02 7.721075e-02 5.980622e-02\n [6] 5.667390e-02 5.578337e-02 5.380835e-02 5.320417e-02 4.764814e-02\n[11] 4.120839e-02 3.187696e-02 1.998784e-02 1.031129e-02 3.399383e-03\n[16] 6.266808e-04 3.037815e-32 2.061722e-32 2.488967e-33\n\n\n\npar(mfrow = c(1, 2))\nplot(pve, xlab = \"Principal Component\",\nylab = \"Proportion of Variance Explained\", ylim = c(0, 1),\ntype = \"b\")\n\nplot(cumsum(pve), xlab = \"Principal Component\",\nylab = \"Cumulative Proportion of Variance Explained\", ylim = c(0, 1), type = \"b\")\n\n\n\n\n\n\nnames(total_1200s)\n\n\n [1] \"name\"         \"Catholic\"     \"Islam\"        \"Orthodox\"    \n [5] \"Buddhist\"     \"Pagan\"        \"Tengrism\"     \"Shinto\"      \n [9] \"Hindu\"        \"Shamanism\"    \"totdegree\"    \"indegree\"    \n[13] \"outdegree\"    \"eigen\"        \"rc\"           \"eigen.rc\"    \n[17] \"dc\"           \"eigen.dc\"     \"broker.tot\"   \"broker.coord\"\n[21] \"broker.itin\"  \"broker.rep\"   \"broker.gate\"  \"broker.lia\"  \n\n\n\ntotal_1200s_brokerag_reg<-total_1200s\n\n\n\n\n\ntotal_1200s_brokerag_reg$win_rate <- (total_1200s_brokerag_reg$outdegree/total_1200s_brokerag_reg$totdegree)\n\n\n\n\n\ntotal_1200s_brokerag_reg$loss_rate <- (total_1200s_brokerag_reg$indegree/total_1200s_brokerag_reg$totdegree)\n\n\n\n\n\ntotal_1200s_brokerag_reg_binom <- total_1200s_brokerag_reg %>% mutate(more_win_or_loss = case_when(\n  win_rate < 0.5 ~ 0,\n    win_rate >= 0.5 ~ 1))\n\n\n\n\n\ntotal_1200s_for_PCA <- total_1200s_brokerag_reg_binom[-c(20:27)]\n\n\napply(total_1200s_for_PCA[-1], 2, mean)\n\n\n   Catholic       Islam    Orthodox    Buddhist       Pagan \n0.712500000 0.068750000 0.087500000 0.087500000 0.012500000 \n   Tengrism      Shinto       Hindu   Shamanism   totdegree \n0.025000000 0.000000000 0.006250000 0.000000000 3.918750000 \n   indegree   outdegree       eigen          rc    eigen.rc \n1.962500000 1.956250000 0.025567955 0.158754617 0.002192746 \n         dc    eigen.dc  broker.tot \n0.841245383 0.023375209 0.341581810 \n\n\n\napply(total_1200s_for_PCA[-1], 2, var)\n\n\n    Catholic        Islam     Orthodox     Buddhist        Pagan \n2.061321e-01 6.442610e-02 8.034591e-02 8.034591e-02 1.242138e-02 \n    Tengrism       Shinto        Hindu    Shamanism    totdegree \n2.452830e-02 0.000000e+00 6.250000e-03 0.000000e+00 2.666631e+01 \n    indegree    outdegree        eigen           rc     eigen.rc \n6.237579e+00 1.595405e+01 5.631476e-03 7.141295e-02 7.316162e-05 \n          dc     eigen.dc   broker.tot \n7.141295e-02 4.574350e-03 3.001236e+01 \n\n\n\n# I cannot scale variables with \n\ntotal_1200s_for_PCA<-total_1200s_for_PCA[-c(8,10)]\n\n\n\n\n\npr.out_2 <- prcomp(total_1200s_for_PCA[-1], scale = TRUE)\n\n\n\n\n\nnames(pr.out_2)\n\n\n[1] \"sdev\"     \"rotation\" \"center\"   \"scale\"    \"x\"       \n\n\n\npr.out_2$center\n\n\n   Catholic       Islam    Orthodox    Buddhist       Pagan \n0.712500000 0.068750000 0.087500000 0.087500000 0.012500000 \n   Tengrism       Hindu   totdegree    indegree   outdegree \n0.025000000 0.006250000 3.918750000 1.962500000 1.956250000 \n      eigen          rc    eigen.rc          dc    eigen.dc \n0.025567955 0.158754617 0.002192746 0.841245383 0.023375209 \n broker.tot \n0.341581810 \n\n\n\npr.out_2$scale\n\n\n   Catholic       Islam    Orthodox    Buddhist       Pagan \n0.454017704 0.253822971 0.283453545 0.283453545 0.111451261 \n   Tengrism       Hindu   totdegree    indegree   outdegree \n0.156615139 0.079056942 5.163943541 2.497514488 3.994251963 \n      eigen          rc    eigen.rc          dc    eigen.dc \n0.075043164 0.267232010 0.008553457 0.267232010 0.067633938 \n broker.tot \n5.478353760 \n\n\n\n\n\n\nbiplot(pr.out_2, scale = 0)\n\n\n\n\n\n\npr.out_2$rotation = -pr.out_2$rotation \n\npr.out_2$x = -pr.out_2$x\n\nbiplot(pr.out_2, scale = 0)\n\n\n\n\n\n\npr.out$sdev\n\n\n [1] 2.217501e+00 1.681548e+00 1.239242e+00 1.211199e+00 1.065982e+00\n [6] 1.037692e+00 1.029507e+00 1.011117e+00 1.005425e+00 9.514802e-01\n[11] 8.848499e-01 7.782431e-01 6.162540e-01 4.426224e-01 2.541422e-01\n[16] 1.091189e-01 7.597269e-16 6.258811e-16 2.174635e-16\n\n\n\npr.var_2 <- pr.out_2$sdev^2\n\npr.var_2\n\n\n [1] 4.903737e+00 2.344663e+00 1.670548e+00 1.250176e+00 1.132904e+00\n [6] 1.097802e+00 1.011326e+00 9.460639e-01 8.661454e-01 5.139677e-01\n[11] 1.659928e-01 9.667541e-02 2.916516e-30 4.832251e-31 2.292490e-31\n[16] 1.889562e-32\n\n\n\npve_2 <- pr.var_2 / sum(pr.var_2)\n\npve_2\n\n\n [1] 3.064835e-01 1.465414e-01 1.044092e-01 7.813602e-02 7.080651e-02\n [6] 6.861260e-02 6.320785e-02 5.912899e-02 5.413409e-02 3.212298e-02\n[11] 1.037455e-02 6.042213e-03 1.822822e-31 3.020157e-32 1.432806e-32\n[16] 1.180977e-33\n\n\n\npar(mfrow = c(1, 2))\nplot(pve_2, xlab = \"Principal Component\",\nylab = \"Proportion of Variance Explained\", ylim = c(0, 1),\ntype = \"b\")\n\nplot(cumsum(pve_2), xlab = \"Principal Component\",\nylab = \"Cumulative Proportion of Variance Explained\", ylim = c(0, 1), type = \"b\")\n\n\n\n\n(information regarding the meaning of each type of brokerage was\nacquired from https://edis.ifas.ufl.edu/publication/WC197)\n\n\n\n",
    "preview": "posts/2022-03-29-blog-post-7-networks/blog-post-7-networks_files/figure-html5/unnamed-chunk-18-1.png",
    "last_modified": "2022-03-29T12:51:28-04:00",
    "input_file": "blog-post-7-networks.knit.md"
  }
]
